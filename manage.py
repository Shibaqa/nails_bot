import logging
import asyncio
import os
import re
from datetime import datetime, timedelta
import pytz
import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
POSTGRES_USER = os.getenv("POSTGRES_USER", "postgres")
POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD")
POSTGRES_HOST = os.getenv("POSTGRES_HOST", "localhost")
POSTGRES_PORT = os.getenv("POSTGRES_PORT", "5432")
POSTGRES_DB = os.getenv("POSTGRES_DB", "nails_bot")
API_TOKEN = os.getenv("YOUR_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ª—É–≥
service_durations = {
    "üíÖ –ú–∞–Ω–∏–∫—é—Ä": 2,
    "‚ú® –ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ": 2,
    "üë° –ü–µ–¥–∏–∫—é—Ä": 2,
    "ü¶∂ –ü–µ–¥–∏–∫—é—Ä –ø–æ–ª–Ω—ã–π": 2,
    "üíé –ö–æ–º–±–æ (–º–∞–Ω–∏–∫—é—Ä + –ø–µ–¥–∏–∫—é—Ä)": 4
}

# –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
salon_address = "–≥. –®–∞—Ä—å—è, —É–ª. –Æ–±–∏–ª–µ–π–Ω–∞—è, —Ç—Ü –í–µ–Ω–µ—Ä–∞, –≤—Ö–æ–¥ —Å–∑–∞–¥–∏ –≤ –ø–æ–¥–≤–∞–ª—å–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ, –∫–∞–±–∏–Ω–µ—Ç —Ç—Ä–µ—Ç–∏–π —Å –∫–æ–Ω—Ü–∞ –ø–æ –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ."
master_contacts = """
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –º–∞—Å—Ç–µ—Ä–∞:
üëâ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (915) 914-65-79
üëâ Telegram: @Eev_kor
"""


class Database:
    _pool = None

    @classmethod
    async def get_pool(cls):
        if cls._pool is None:
            cls._pool = await asyncpg.create_pool(
                user=POSTGRES_USER,
                password=POSTGRES_PASSWORD,
                database=POSTGRES_DB,
                host=POSTGRES_HOST,
                port=POSTGRES_PORT,
                min_size=5,
                max_size=20,
                max_inactive_connection_lifetime=300
            )
        return cls._pool

    @classmethod
    async def close(cls):
        if cls._pool:
            await cls._pool.close()
            cls._pool = None


class Form(StatesGroup):
    service = State()
    date = State()
    time = State()
    name = State()
    phone = State()
    cancel_appointment = State()


def get_back_to_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'"""
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return builder.as_markup(resize_keyboard=True)


async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    pool = await Database.get_pool()
    async with pool.acquire() as conn:
        try:
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    client_name TEXT NOT NULL,
                    phone TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT NOW()
                )
            ''')
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS appointments (
                    appointment_id SERIAL PRIMARY KEY,
                    user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
                    service TEXT NOT NULL,
                    date TEXT NOT NULL,
                    time TEXT NOT NULL,
                    confirmed BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT NOW()
                )
            ''')
            await conn.execute('''
                CREATE INDEX IF NOT EXISTS idx_appointments_date ON appointments(date)
            ''')
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise


async def create_user(user_id: int, username: str, client_name: str, phone: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    pool = await Database.get_pool()
    async with pool.acquire() as conn:
        try:
            await conn.execute('''
                INSERT INTO users (user_id, username, client_name, phone)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (user_id) DO UPDATE
                SET username = EXCLUDED.username,
                    client_name = EXCLUDED.client_name,
                    phone = EXCLUDED.phone
            ''', user_id, username, client_name, phone)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            raise


async def create_appointment(user_id: int, service: str, date: str, time: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    pool = await Database.get_pool()
    async with pool.acquire() as conn:
        try:
            return await conn.fetchval('''
                INSERT INTO appointments (user_id, service, date, time)
                VALUES ($1, $2, $3, $4)
                RETURNING appointment_id
            ''', user_id, service, date, time)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
            raise


async def get_booked_times(date: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–Ω—è—Ç—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
    pool = await Database.get_pool()
    async with pool.acquire() as conn:
        try:
            records = await conn.fetch('''
                SELECT time, service FROM appointments WHERE date = $1
            ''', date)
            return [(record['time'], record['service']) for record in records]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤: {e}")
            return []


async def get_appointments():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π"""
    pool = await Database.get_pool()
    async with pool.acquire() as conn:
        try:
            return await conn.fetch('''
                SELECT a.appointment_id, a.service, a.date, a.time, 
                       u.client_name, u.phone
                FROM appointments a
                JOIN users u ON a.user_id = u.user_id
                ORDER BY a.date, a.time
            ''')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {e}")
            return []


def generate_dates():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç"""
    dates = []
    today = datetime.now(pytz.timezone('Europe/Moscow'))
    for i in range(1, 31):
        date = today + timedelta(days=i)
        if date.weekday() < 5:  # –¢–æ–ª—å–∫–æ –±—É–¥–Ω–∏–µ –¥–Ω–∏
            dates.append(date.strftime('%d.%m.%Y'))
    return dates


async def generate_times(service: str, selected_date: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    duration = service_durations.get(service, 2)
    booked_slots = await get_booked_times(selected_date)
    available_times = []

    start_hour = 10
    end_hour = 20
    current_time = datetime.strptime(f"{selected_date} {start_hour}:00", "%d.%m.%Y %H:%M")
    end_time = datetime.strptime(f"{selected_date} {end_hour}:00", "%d.%m.%Y %H:%M")

    while current_time + timedelta(hours=duration) <= end_time:
        time_slot = current_time.time().strftime('%H:%M')
        slot_end = (current_time + timedelta(hours=duration)).time()

        conflict = False
        for booked_time, booked_service in booked_slots:
            booked_start = datetime.strptime(booked_time, '%H:%M').time()
            booked_duration = service_durations.get(booked_service, 2)
            booked_end = (datetime.strptime(booked_time, '%H:%M') + timedelta(hours=booked_duration)).time()

            if not (slot_end <= booked_start or current_time.time() >= booked_end):
                conflict = True
                break

        if not conflict:
            available_times.append(time_slot)

        current_time += timedelta(hours=2)

    return available_times


@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await state.clear()

        builder = ReplyKeyboardBuilder()
        services = list(service_durations.keys())

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É—Å–ª—É–≥
        for service in services:
            builder.add(types.KeyboardButton(text=service))
        builder.adjust(2)

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
        if str(message.from_user.id) == ADMIN_ID:
            admin_buttons = [
                types.KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏"),
                types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
            ]
            builder.row(*admin_buttons)

        await message.answer(
            "üå∏ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã!</b> üå∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.message(F.text.in_(service_durations.keys()))
async def select_service(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –∏–∑ –º–µ–Ω—é"""
    try:
        service = message.text
        await state.set_state(Form.service)
        await state.update_data(service=service)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
        dates = generate_dates()

        builder = ReplyKeyboardBuilder()
        for date in dates:
            builder.add(types.KeyboardButton(text=date))
        builder.add(types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
        builder.adjust(3)

        await message.answer(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        await state.set_state(Form.date)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_service: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard()
        )


@dp.message(Form.date)
async def process_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    try:
        selected_date = message.text

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if selected_date == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            await state.clear()
            await send_welcome(message, state)
            return

        data = await state.get_data()
        service = data['service']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        try:
            datetime.strptime(selected_date, '%d.%m.%Y')
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.",
                reply_markup=get_back_to_menu_keyboard()
            )
            return

        await state.update_data(date=selected_date)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏ —É—Å–ª—É–≥–∏
        available_times = await generate_times(service, selected_date)

        if not available_times:
            await message.answer(
                "‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
                reply_markup=get_back_to_menu_keyboard()
            )
            return

        builder = ReplyKeyboardBuilder()
        for time in available_times:
            builder.add(types.KeyboardButton(text=time))
        builder.add(types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
        builder.adjust(3)

        await message.answer(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        await state.set_state(Form.time)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_date: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard()
        )


@dp.message(Form.time)
async def process_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        selected_time = message.text

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if selected_time == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            await state.clear()
            await send_welcome(message, state)
            return

        data = await state.get_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        try:
            datetime.strptime(selected_time, '%H:%M')
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.",
                reply_markup=get_back_to_menu_keyboard()
            )
            return

        await state.update_data(time=selected_time)

        await message.answer(
            "üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_time: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard()
        )


@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    try:
        name = message.text.strip()
        if not name or len(name) < 2:
            await message.answer(
                "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.",
                reply_markup=get_back_to_menu_keyboard()
            )
            return

        await state.update_data(name=name)

        await message.answer(
            "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 89159086325 –∏–ª–∏ +79159086325):",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.phone)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_name: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard()
        )

@dp.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    try:
        phone = message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not re.match(r'^(\+7|8|7)\d{10}$', phone):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79159146579 –∏–ª–∏ +79159146579.",
                reply_markup=get_back_to_menu_keyboard()
            )
            return

        data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await create_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            client_name=data['name'],
            phone=phone
        )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        appointment_id = await create_appointment(
            user_id=message.from_user.id,
            service=data['service'],
            date=data['date'],
            time=data['time']
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        confirmation_message = (
            "‚úÖ <b>–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
            f"üîπ –£—Å–ª—É–≥–∞: {data['service']}\n"
            f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {data['time']}\n"
            f"üë§ –ò–º—è: {data['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            f"üìç –ê–¥—Ä–µ—Å —Å–∞–ª–æ–Ω–∞: {salon_address}\n\n"
            f"{master_contacts}"
        )

        await message.answer(confirmation_message)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if ADMIN_ID:
            try:
                await bot.send_message(
                    ADMIN_ID,
                    "üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n\n" + confirmation_message
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

        await state.clear()
        await send_welcome(message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_phone: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard()
        )


@dp.message(F.text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def show_appointments(message: types.Message):
    """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        return

    try:
        appointments = await get_appointments()

        if not appointments:
            await message.answer("üì≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
            return

        response = ["üìÖ <b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:</b>\n\n"]
        for appt in appointments:
            appt_info = (
                f"üÜî ID: {appt['appointment_id']}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {appt['client_name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {appt['phone']}\n"
                f"üîπ –£—Å–ª—É–≥–∞: {appt['service']}\n"
                f"üìÖ –î–∞—Ç–∞: {appt['date']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {appt['time']}\n\n"
            )
            response.append(appt_info)

        await message.answer("\n".join(response))

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_kb = ReplyKeyboardBuilder()
        admin_kb.add(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"))
        admin_kb.add(types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
        admin_kb.adjust(2)

        await message.answer(
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É",
            reply_markup=admin_kb.as_markup(resize_keyboard=True)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π",
            reply_markup=ReplyKeyboardRemove()
        )


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def cancel_appointment_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏"""
    if str(message.from_user.id) != ADMIN_ID:
        return

    await state.set_state(Form.cancel_appointment)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        reply_markup=get_back_to_menu_keyboard()
    )


@dp.message(Form.cancel_appointment)
async def process_cancel_appointment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏"""
    if str(message.from_user.id) != ADMIN_ID:
        return

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            await state.clear()
            await send_welcome(message, state)
            return

        appointment_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    pool = await Database.get_pool()
    async with pool.acquire() as conn:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            record = await conn.fetchrow(
                '''SELECT a.*, u.user_id, u.client_name 
                FROM appointments a
                JOIN users u ON a.user_id = u.user_id
                WHERE a.appointment_id = $1''',
                appointment_id
            )

            if not record:
                await message.answer("‚ùå –ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            await conn.execute(
                'DELETE FROM appointments WHERE appointment_id = $1',
                appointment_id
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await message.answer(
                f"‚úÖ –ó–∞–ø–∏—Å—å ID {appointment_id} –æ—Ç–º–µ–Ω–µ–Ω–∞\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {record['client_name']}\n"
                f"üìÖ –î–∞—Ç–∞: {record['date']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {record['time']}"
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            try:
                await bot.send_message(
                    record['user_id'],
                    "‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
                    f"üîπ –£—Å–ª—É–≥–∞: {record['service']}\n"
                    f"üìÖ –î–∞—Ç–∞: {record['date']}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {record['time']}\n\n"
                    f"{master_contacts}"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏")
        finally:
            await state.clear()
            await send_welcome(message, state)


@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    try:
        await state.clear()
        await send_welcome(message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_menu: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardRemove()
        )


async def send_reminders():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    while True:
        try:
            now = datetime.now(pytz.timezone('Europe/Moscow'))
            tomorrow = now + timedelta(days=1)

            pool = await Database.get_pool()
            async with pool.acquire() as conn:
                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å
                if now.hour == 10:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ 10 —É—Ç—Ä–∞
                    appointments = await conn.fetch(
                        '''SELECT a.*, u.user_id, u.client_name 
                        FROM appointments a
                        JOIN users u ON a.user_id = u.user_id
                        WHERE a.date = $1''',
                        tomorrow.strftime('%d.%m.%Y')
                    )

                    for appt in appointments:
                        try:
                            await bot.send_message(
                                appt['user_id'],
                                "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏!\n\n"
                                f"–ó–∞–≤—Ç—Ä–∞ –≤ {appt['time']} —É –≤–∞—Å –∑–∞–ø–∏—Å—å:\n"
                                f"üîπ {appt['service']}\n"
                                f"üìç –ê–¥—Ä–µ—Å: {salon_address}\n\n"
                                f"{master_contacts}"
                            )
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ —á–∞—Å
                hour_later = now + timedelta(hours=1)
                appointments = await conn.fetch(
                    '''SELECT a.*, u.user_id, u.client_name 
                    FROM appointments a
                    JOIN users u ON a.user_id = u.user_id
                    WHERE a.date = $1 AND a.time = $2''',
                    now.strftime('%d.%m.%Y'),
                    hour_later.strftime('%H:%M')
                )

                for appt in appointments:
                    try:
                        await bot.send_message(
                            appt['user_id'],
                            "‚è≥ –ß–µ—Ä–µ–∑ —á–∞—Å —É –≤–∞—Å –∑–∞–ø–∏—Å—å!\n\n"
                            f"üîπ –£—Å–ª—É–≥–∞: {appt['service']}\n"
                            f"‚è∞ –í—Ä–µ–º—è: {appt['time']}\n"
                            f"üìç –ê–¥—Ä–µ—Å: {salon_address}"
                        )
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        finally:
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å


async def on_startup():
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    await bot.delete_webhook(drop_pending_updates=True)


async def on_shutdown():
    print("‚è≥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    if hasattr(dp.storage, 'close'):
        await dp.storage.close()

    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏
    session = await bot.get_session()
    if isinstance(session, AiohttpSession):
        await session.close()

    print("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    try:
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)

        print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

    except Exception as ex:
        print(f"üö® –û—à–∏–±–∫–∞: {type(ex).__name__}: {ex}")
    finally:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
        try:
            session = await bot.get_session()
            if isinstance(session, AiohttpSession):
                await session.close()
        except:
            pass


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}")
